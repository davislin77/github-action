name: "Pull Request Labeler"
on:
  pull_request_review:
    types: [submitted]

jobs:
  approved:
    permissions:
      contents: read
      pull-requests: write
    if: github.event.review.state == 'APPROVED'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/labeler@v4
  
  doTest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        continue-on-error: true
        run: |
          result=$(npm test)
          echo $result

      - name: Set PR status
        if: always()  # This step runs regardless of the test results
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            # console.log({
            #   github,
            #   context,
            # })


            # const reviews = await github.pulls.listReviews({
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   pull_number: context.issue.number,
            # });

            # console.log('reviews', reviews)



            # const approvedReviewIds = reviews.data
            #   .filter((review) => review.state === 'APPROVED')
            #   .map((approvedReview) => approvedReview.id);

            # console.log('approvedReviewIds', approvedReviewIds)

            # const result = await github.pulls.dismissReview({
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   pull_number: context.issue.number,
            #   body: 'Dismissing previous approval',
            # });

            # console.log('result', result)            

            # for (const reviewId of approvedReviewIds) {
            #   await github.pulls.dismissReview({
            #     owner: context.repo.owner,
            #     repo: context.repo.repo,
            #     pull_number: context.issue.number,
            #     body: 'Dismissing previous approval',
            #     review_id: reviewId,
            #   });
            #   console.log('reviewId', reviewId);
      
            #   github.pulls.createReview({
            #     owner: context.repo.owner,
            #     repo: context.repo.repo,
            #     pull_number: context.issue.number,
            #     body: 'Dismissing previous approval',
            #     event: 'DISMISS',
            #     review_id: reviewId,
            #   });
            }
